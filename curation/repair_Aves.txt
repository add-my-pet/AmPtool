=== mydata

metaData.data_0     = {'ab'; 'ap'; 'aR'; 'am'; 'LR'; 'Li'; 'Wwb'; 'Wwi'; 'Ri'}; 

metaData.author_mod_1   = {'Bas Kooijman'};    
metaData.date_mod_1     = [2023 07 10];              
metaData.email_mod_1    = {'bas.kooijman@vu.nl'};            
metaData.address_mod_1  = {'VU University, Amsterdam'};   

metaData.curator     = {'Starrlight Augustine'};
metaData.email_cur   = {'starrlight@tecnico.ulisboa.pt'}; 
metaData.date_acc    = [2023 07 10];

tx -> tp
data.tp = 135;     units.tp = 'd';    label.tp = 'time since birth at fledging/puberty'; bibkey.tp = 'ARKive';   
  temp.tp = C2K(38.62);  units.temp.tp = 'K'; label.temp.tp = 'temperature';

%% Discussion points
D1 = 'mod_1: Puberty is assumed to coincide with fledging with a waiting time to first brood';
metaData.discussion = struct('D1',D1);  

=== pars_init
par.f_tW = 1;         free.f_tW  = 0;   units.f_tW = '-';         label.f_tW = 'scaled functional response for tW data'; 
par.t_R = 365;       free.t_R   = 1;   units.t_R = 'd';          label.t_R = 'time since birth at first brood'; 

=== predict
  TC = tempcorr(temp.am, T_ref, T_A); kT_M = TC * k_M;


  % life cycle
  pars_tp = [g; k; l_T; v_Hb; v_Hp];  % compose parameter vector
  [t_p, t_b, l_p, l_b, info] = get_tp(pars_tp, f); % -, scaled times & lengths

  m_Em_m = y_E_V * E_m_m/ E_G;         % mol/mol, reserve capacity 
  ome_m = m_Em_m * w_E/ w_V;           % -, contribution of reserve to weight

for i=2:size(data.tW,1); if data.tW(i,1)<=data.tW(i-1,1); data.tW(i,1)=data.tW(i-1,1)+1e-8; end; end

%% set weights for all real data
weights = setweights(data, []);
weights.tW = weights.tW * 2;
weights.tp = 5;
weights.Wwb = 5;
weights.Wwi = 5;
weights.Ri = 5;
weights.ab = 5;

par.f_05 = 3.6671;    free.f_05  = 1;   units.f_05 = '-';         label.f_05 = 'scaled functional response for tW data at 05 d'; 
par.f_15 = 0.93115;   free.f_15  = 1;   units.f_15 = '-';         label.f_15 = 'scaled functional response for tW data at 15 d'; 

  % life cycle
  pars_tx = [g; k; l_T; v_Hb; v_Hx];  % compose parameter vector
  tau_x = get_tp(pars_tx, f); 
  pars_tp = [g; k; l_T; v_Hb; v_Hp];  % compose parameter vector
  [tau_p, tau_b, l_p, l_b, info] = get_tp(pars_tp, f);  % -, scaled times & lengths
  if ~info; prdData = []; return; end

  tf(:,1) = tf(:,1) * kT_M;

  % time-weight
  tvel = get_tp(pars_tp, tf, [tau_b 1 l_b], tW(:,1)*kT_M);
  EWw = (L_m * tvel(:,4)).^3 .* (1 + tvel(:,3) * ome);   % g, weight
  %
  % female
  [tvel, t_p, t_b, l_p, l_b] = get_tp(pars_tp, tf, [tau_b 1 l_b], tW_f(:,1)*kT_M);
  EWw_f = (L_m * tvel(:,4)).^3 .* (1 + tvel(:,3) * ome);   % g, weight
  % male
  tvel = get_tp(pars_tpm, tf, [t_b, z/z_m, l_b*z/z_m], tW_m(:,1)*kT_M);
  EWw_m = (L_mm * tvel(:,4)).^3 .* (1 + tvel(:,3) * ome_m); % g, weight


  % time-weight
  tf = [40 75; f_40 f_75]';
  [t, EL] = ode45(@get_EL, tW(:,1), [E_m, L_b], [], tf, v * TC, g, E_m, L_m, p_Am * TC); % EL: {J/cm^3, cm}, with {[E], L}
  EWw = EL(:,2).^3 .* (1 + EL(:,1) * w_E/ mu_E/ d_E); % g, wet weight

function dEL = get_EL(t, EL, tf, v, g, E_m, L_m, p_Am)
  E = EL(1); % J/cm^3, reserve density [E}
  L = EL(2); % cm, structural length
  
  f = spline1(t, tf);                    % -, scaled functional response at t
  dE = (f * p_Am - E * v)/ L;            % J/d.cm^3, change in reserve density d/dt [E]
  e = E/ E_m;                            % -, scaled reserve density
  r = v * (e/ L - 1/ L_m)/ (e + g);      % 1/d, specific growth rate
  dL = L * r/ 3;                         % cm/d, change in structural length d/dt L
  
  dEL = [dE; dL]; % catenate for output
end  